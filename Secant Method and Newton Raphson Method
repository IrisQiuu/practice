---
title: "Root finding"
author: "Chenyu Qiu"
date: "2/19/2019"
output: html_document
---
###(1)Introduction:
  One of the root-fingding method is secant method. Supposing we are trying to find the root of f(x)=0, the solution of this equation is the point on the x-coordinate which the curve crosses the x-axis. Similar to the Newton-Raphson method, the secant method is also based on approximation. Firstly, we start with two guesses x0 and x1. Then, we come up with another guess x2=x1-f(x1)*(x0-x1)/(f(x0)-f(x1)). Keep replacing x0, x1 by x1 and new x2 until we find the solution of the equation.
  
###(2)The program for secant method

```{r}
# Define Secant Method function
secantmethod<-function(func,x0,x1,Tolerance,MaxNumberOfIterations){
  #Set up f0, f1, interations
  f0 <- func(x0)
  f1<- func(x1)
  i <- 0

	#Set up a while loop until we hit the required target accuracy or the max. number of steps
	while ((i < MaxNumberOfIterations) && (abs(f1) > Tolerance)){
	  segments(x0, 0, x1=x0, y1=f0, col = "blue", lty = 2) 
	  segments(x1, 0, x1=x1, y1=f1, col = "blue", lty = 2)
	  if (f0==f1){
	    cat("Cannot find x2 as f(x0) is equal to f(x1)")
	    break
	  }
	  x2 <- x1-f1*(x1-x0)/(f1-f0)
	  f0 <- f1
	  f1 <- func(x2)
	  x0 <- x1
	  x1 <- x2
	  i <- i+1
	  if ((f0=="NaN")||(f1=="NaN")){
	    cat("Function not defined error.\n")
	    break
	  }
    # how the program is getting on
		cat(paste("\nIteration ",i,":   X=",x1))
	}
  
	# output the result
	if (abs(f1) < Tolerance ){
		cat(paste("\nFound the root point: ",x1, "after ", i, "iterations"))
		}else{
		cat(paste("\nConvergence failure after ", i, 	"iterations"))
	}
  return(x1)
}

#define the function of cos(x)-x 
start_time <- Sys.time()
F1<-function(x){
		return(cos(x)-x)
}

# The plot
curve(cos(x)-x, 0, 3,main="y=cos(x)-x") 
a1 <- secantmethod(F1, 1, 2, 1e-3, 40)
abline(h=0, v=a1, col="red", lty=2, lwd=1) 
end_time <- Sys.time()
cat("\n t=", end_time - start_time)

```
```{r}
#define the function of log(x)-exp(-x)
start_time <- Sys.time()
F2<-function(x){
		return(log(x)-exp(-x))
}

# The plot
curve(log(x)-exp(-x), 0, 3, main="y=log(x)-exp(-x)") 
a2 <- secantmethod(F2, 1, 2, 1e-3, 40)
abline(h=0, v=a2, col="red", lty=2, lwd=1) 
end_time <- Sys.time()
cat("\n t=", end_time - start_time)
```

###(3)The program for Newton Raphson Method

```{r}
# Define the Newton-Raphson function
NewtonRaphson<-function(func,x0,Tolerance,MaxNumberOfIterations){
	
  #initialize
  x0 <- x0
  fx <- func(x0)
  i <- 0
  
	#Set up a while loop 
	while ((i < MaxNumberOfIterations) && (abs(fx[1]) > Tolerance)){
	  segments(x0, 0, x1=x0, y1=fx[1], col = "blue", lty = 2)
	  x1 <- x0-fx[1]/fx[2]
	  segments(x1, 0, x1=x0, y1=fx[1], col = "blue", lty = 2)
	  x0 <- x1
	  fx <- func(x0)
	  i <- i+1
	  # Check that the function and it's derivative are defined at X 
	  if ((fx[1]=="NaN")||(fx[2]=="NaN")){
	    cat("Function or derivative not defined error.\n")
	    break
	  }
    # how the program is getting on
		cat(paste("\nIteration ",i,":   X=",x0))
	}
	# output the result
	if (abs(fx[1]) < Tolerance){
		cat(paste("\nFound the root point: ",x0, "after ", i, "iterations"))
		}else{
		cat(paste("\nConvergence failure. Deviation: ",abs(fx), "after ", i, 	"iterations"))
		  }
  return(x0)
}

# Define the function of cos(x)-x
start_time <- Sys.time()
F3<-function(x){
		return(c(cos(x)-x,-sin(x)-1))
}

# The plot
curve(cos(x)-x, 0, 3, main="y=cos(x)-x") 
a3 <- NewtonRaphson(F3, 2, 1e-3, 40)
abline(h=0, v=a3, col="red", lty=2, lwd=1)
end_time <- Sys.time()
cat("\n t=", end_time - start_time)
```
```{r}
# Define the function of log(x)-exp(-x)
start_time <- Sys.time()
F4<-function(x){
		return(c(log(x)-exp(-x),(1/x)+exp(-x)))
}

# The plot
curve(log(x)-exp(-x), 0, 3, main="y=log(x)-exp(-x)") 
a4 <- NewtonRaphson(F4, 2, 1e-3, 40)
abline(h=0, v=a4, col="red", lty=2, lwd=1)
end_time <- Sys.time()
cat("\n t=", end_time - start_time)
```

####(4) Results and conclusion.
  According to the comparison above, the root-finding results of secant method and Newton-Raphson methos are comparable to each other. 0.74 is the root for y=cos(x)-x, and 1.31 is the root for y=log(x)-exp(-x). Both methods have merits and drawbacks. It's obvious that Newton-Raphson method has a slightly higher speed in the approximation process, but we cannot conduct this method when the derivative f'(x) does not exist. The problem of secant method is we cannot find an x2 when f(x1) is equal to f(x0), as follows ((4)a and (4)b). Therefore, we have to provide two appropriate initial points x0 and x1 when we use secant method.
  
```{r}
# (4a). Using NewtonRaphson method
F5<-function(x){
		return(c(x^(2), 2*x))
}
# The plot
curve(x^2, -4, 4, main="y=x^2") 
a5=NewtonRaphson(F5, 3, 1e-3, 40)
abline(h=0, v=a5, col="red", lty=2, lwd=1)
```
```{r}
# (4b). Using the secant method
F6<-function(x){
		return(x^(2))
}
# The plot
curve(x^(2), -4, 4, main="y=x^2") 
a6 <- secantmethod(F6, -3, 3, 1e-3, 40)
abline(h=0, col="red", lty=2, lwd=1) 
```

